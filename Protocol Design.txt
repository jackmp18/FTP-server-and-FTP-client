Protocol Design

Messages exchanged across the control channel:
Commands from the client to the server, such as "put", "get", "ls", and "quit" will be sent using the control channel. The server will also send ephemeral port numbers back to the client over the control channel for data transfer. 

How the server will respond to messages:
The server will respond to “put”, “get”, and “ls” with SUCCESS or FAILURE. If a “get” command is received, the server sends back the file mentioned after the get. If a “put” command is received, the server receives the file mentioned after the put and saves it in its directory. If a “ls” command is received, the server sends back a list of files in its directory. If a “exit” command is received, the connection is severed. 

Size/format of messages:
The control channel messages will be strings encoded in bytes so they can be sent across the channel, and then decoded back into string format. Data messages, such as files being transferred, will start with a fixed-size header indicating the length of the data, followed by the actual data bytes.

Message exchanges that will set up the file transfer channel:
A file transfer will be initiated by the client sending a "put" or "get" command. The server responds with an ephemeral port number for the client to connect to. Once the data connection is established on this port, file transfer can proceed.

How the receiving side knows when to start/stop receiving the file:
The sender will include the size of the file in the header of the message, enabling the receiver to know exactly how many bytes to expect. The receiver reads from the socket until it has received the number of bytes specified in the header.

Handling buffer overflow:
The TCP protocol has built-in flow control mechanisms, such as reading and writing in chunks to prevent sending more data than the receiver can process. Additionally, the sender can wait for acknowledgments from the receiver before sending more data, ensuring that the receiver's buffer does not overflow.


